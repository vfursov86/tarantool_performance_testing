version: '3'
services:
  tarantool:
    image: tarantool/tarantool
    command: |
      /bin/sh -c '/bin/sh -s <<EOF
      cat > /opt/tarantool/app.lua <<EON
        box.cfg{
          listen = 3301,
          read_only = false
        }
        
        box.once("schema", function()
          box.schema.space.create("testbase")
          box.space.testbase:format({
           {name = "id", type = "unsigned"},
           {name = "band_name", type = "string"},
           {name = "year", type = "unsigned"}
           })
          box.space.testbase:create_index("primary",
            {type = 'tree', parts = {"id"}})
          local httpd = require("http.server")
          local http_handler = require("metrics.plugins.prometheus").collect_http
          require("metrics").cfg{labels = {alias = "myserver"}}
          httpd.new("0.0.0.0", 8088)
            :route({path = "/metrics"}, function(...)
              return http_handler(...)
          end)
            :start()  
        end)
        
        function tnt_rest(req)
          return "Hello from Tarantool"
        end
        
        function insert(req, ...)
          box.space.testbase:insert{tonumber(req.args.id), req.args.bandname, tonumber(req.args.year)}
          return 200
        end
        
      EON
      tarantool /usr/local/bin/tarantool-entrypoint.lua /opt/tarantool/app.lua
      EOF'
    ports:
      - "8088:8088"

  nginx:
    image: tarantool/tarantool-nginx
    depends_on:
      - tarantool
    volumes:
      - ./tarantool.template:/etc/nginx/conf.d/tarantool.template
    ports:
      - "8080:8080"
    command: |
      /bin/sh -c '/bin/sh -s <<EOF
      cat > /etc/nginx/conf.d/default.conf <<EON
          upstream backend {
              server tarantool:3301;
          }

          server {
              listen       8080;
              server_name  localhost;

              location /tnt_rest {
                  tnt_http_rest_methods get post put delete;
                  tnt_pass_http_request on;
                  tnt_pure_result on;
                  tnt_pass backend;
                  add_header Content-Type text/plain;
              }
              
              location /insert {
                  tnt_http_rest_methods get post put delete;
                  tnt_pass_http_request on parse_args;
                  tnt_pure_result on;
                  tnt_pass backend;
                  add_header Content-Type text/plain;
              }
              
              location = /basic_status {
                  stub_status on;
              }
          }
      EON
      nginx -g "daemon off;"
      EOF'
   
  nginx-exporter:
      image: nginx/nginx-prometheus-exporter
      container_name: nginx-exporter
      restart: unless-stopped
      environment:
        - SCRAPE_URI=http://host.docker.internal:8080/basic_status
        - TELEMETRY_PATH=/metrics
        - NGINX_RETRIES=10
        - SSL_VERIFY=false
      ports:
        - "9113:9113"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    expose:
      - 9090
    ports:
      - "9090:9090"  
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    # - '-alertmanager.url=http://alertmanager:9093'
    volumes:
    - ./monitoring/container_monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
    - nginx-exporter

  grafana:
    image: docker.io/grafana/grafana-oss:latest
    restart: always
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_TLS_SKIP_VERIFY_INSECURE=true
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    depends_on:
      - prometheus    