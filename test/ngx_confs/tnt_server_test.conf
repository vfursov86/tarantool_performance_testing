
http {

   autoindex  off;

   include       mime.types;
   default_type  application/octet-stream;

   client_body_buffer_size 1m;
   client_header_buffer_size 256k;
   large_client_header_buffers 8 1024k;

   client_max_body_size 64m;

   client_body_timeout 12;
   client_header_timeout 12;
   keepalive_timeout 15;
   send_timeout 10;

   upstream tnt {
     server 127.0.0.1:9999 max_fails=1 fail_timeout=1s;
     keepalive 20000;
   }

   server {

     listen 8081 default;
     server_name tnt_test;

     # Exmaple
     location = /echo {
      tnt_pass tnt;
     }

     location = /tnt {
       tnt_pass tnt;
     }
     location /echo_2 {
       tnt_http_rest_methods get post put;
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /preset_method {
       tnt_method 'echo_2';
       tnt_pass tnt;
     }
     location = /post_pass_http_request {
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /post_preset_method {
       tnt_method 'echo_2';
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location = /echo_2/overflow_rest_api {
       tnt_pass_http_request_buffer_size 30;
       tnt_pass tnt;
       tnt_pass_http_request on;
     }
     location /overflow_post_pass_http_request {
       tnt_pass_http_request_buffer_size 30;
       tnt_method 'echo_2';
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /rest_api_get {
       tnt_http_rest_methods get;
       tnt_pass tnt;
       tnt_pass_http_request on;
     }
     location /rest_api_parse_query_args {
       tnt_http_rest_methods get;
       tnt_pass tnt;
       tnt_pass_http_request on parse_args;
     }

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/37 [[
     location /ucp {
       # answers check infinity timeout
       tnt_read_timeout 60m;
       # enable lua request object
       if ( $request_method = GET ) {
          tnt_method "read";
       }
       tnt_http_rest_methods get;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/44 [[
     location /issue_44 {
       tnt_http_rest_methods get;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }

     location /issue_44_not_pure {
       tnt_method issue_44;
       tnt_http_rest_methods get;
       tnt_pass tnt;
     }

     location /issue_44_skip {
       tnt_method issue_44;
       tnt_http_rest_methods get;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/43 [[
     location /issue_43 {
       tnt_http_rest_methods post;
       tnt_method echo_1;
       tnt_pass tnt;
     }

     location /echo_1/issue_43_post_and_get {
       tnt_http_rest_methods post get;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/58 [[
     location /issue_58 {
       if ( $request_method = GET ) {
             tnt_method "read";
       }
       if ( $request_method = PUT ) {
             tnt_method "insert";
       }
       if ( $request_method = POST ) {
             tnt_method "update";
       }
       if ( $request_method = DELETE ) {
             tnt_method "delete";
       }
       tnt_http_rest_methods get delete;
       tnt_http_methods all;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # QUASTION, BUG --
     # https://github.com/tarantool/nginx_upstream_module/issues/69 [[
     location /issue_59 {
       tnt_pass_http_request on parse_args;
       tnt_http_rest_methods post get;
       tnt_pass tnt;
     }
     # ]]

     location /issue_71 {
      tnt_pass_http_request on parse_args unescape;
      tnt_http_rest_methods all;
      tnt_http_methods all;
      tnt_pass tnt;
    }

    location /pass_body {
      tnt_pass_http_request on pass_body;
      tnt_http_rest_methods all;
      tnt_method pass_body_handler;
      tnt_pass tnt;
    }

    location /dont_pass_body {
      tnt_pass_http_request on;
      tnt_http_rest_methods all;
      tnt_method update;
      tnt_pass tnt;
    }

    location /headers_out {
      add_header "x-added-header" $request_time;
      tnt_method update;
      tnt_pass tnt;
    }

    location /unescape {
      tnt_http_rest_methods get;
      tnt_pass_http_request parse_args unescape;
      tnt_method echo_1;
      tnt_pass tnt;
    }

    location /form {
      tnt_pass_http_request on pass_body;
      tnt_http_rest_methods all;
      tnt_method touch;
      tnt_pass tnt;
    }

    location /form_large {
      tnt_pass_http_request_buffer_size 16000;
      tnt_pass_http_request on pass_body;
      tnt_http_rest_methods all;
      tnt_method touch;
      tnt_pass tnt;
    }

    location /tnt_proxy {
      tnt_method tnt_proxy;
      tnt_buffer_size 1m;
      tnt_out_multiplier 10;
      tnt_pass_http_request on parse_args;
      tnt_pass tnt;
    }

#    location /lua {
#
#        lua_need_request_body on;
#
#        rewrite_by_lua '
#
#          local cjson = require("cjson")
#
#          local map = {
#            GET = ngx.HTTP_GET,
#            POST = ngx.HTTP_POST,
#            PUT = ngx.HTTP_PUT,
#            -- ...
#          }
#
#          local res = ngx.location.capture("/tnt_proxy", {
#            args = ngx.var.args,
#            method = map[ngx.var.request_method],
#            body = ngx.body
#          })
#
#          if res.status == ngx.HTTP_OK then
#            local answ = cjson.decode(res.body)
#
#            -- Read reply
#            local result = answ["result"]
#
#            if result ~= nil then
#              ngx.status = result[1]["ngx"][1]
#              for k, v in pairs(result[1]["ngx"][2]) do
#                ngx.header[k] = v
#              end
#
#              table.remove(result, 1)
#              ngx.say(cjson.encode(result))
#            else
#              ngx.status = 502
#              ngx.say(res.body)
#            end
#
#            -- Finalize execution
#            ngx.exit(ngx.OK)
#          else
#            ngx.status = 502
#            ngx.say("Tarantool does not work")
#          end
#        ';
#    }

    location /echo_big {
      tnt_pass_http_request_buffer_size 1m;
      tnt_method echo_big;
      tnt_pass_http_request on parse_args;
      tnt_http_rest_methods all;
      tnt_http_methods all;
      tnt_pass tnt;
    }

    location /url_encoded {
      tnt_pass_http_request_buffer_size 1m;
      tnt_pass_http_request on parse_args parse_urlencoded;
      tnt_http_rest_methods get post;
      tnt_http_methods get post;
      tnt_pass tnt;
    }

    location ~ /method_ccv/([-_a-zA-Z0-9/]+)/ {
      tnt_method $1;
      tnt_pass_http_request_buffer_size 1m;
      tnt_http_rest_methods get;
      tnt_http_methods get;
      tnt_pass tnt;
    }

    location /headers_ccv {
      tnt_method method_1;
      tnt_set_header 'X-host' $host;
      tnt_set_header 'X-Str' 'str';
      tnt_set_header 'X-Uri' $uri;
      tnt_pass_http_request_buffer_size 1m;
      tnt_http_rest_methods get;
      tnt_http_methods get;
      tnt_pass tnt;
    }

    location /skip_count_1 {
      tnt_method echo_2;
      tnt_multireturn_skip_count 1;
      tnt_pass tnt;
    }

    location /skip_count_2 {
      tnt_method echo_2;
      tnt_multireturn_skip_count 2;
      tnt_pass tnt;
    }

    ##
    ## DML tests
    ##
    location /insert {
      tnt_insert 512 "index=%n&string=%s&float=%f&double=%d&bool=%b&int=%n";
      tnt_pass tnt;
    }

    location /delete {
      tnt_delete 512 0 "index=%n";
      tnt_pass tnt;
    }

    location /select {
      tnt_select 512 0 0 100 ge "index=%n";
      tnt_pass tnt;
    }

    location /replace {
      tnt_replace 512 "index=%n&string=%s&float=%f&double=%d&bool=%b&int=%n";
      tnt_pass tnt;
    }

    ## https://github.com/tarantool/nginx_upstream_module/issues/98
    location /error_if_escaped {
      tnt_pass_http_request on parse_args unescape;
      tnt_http_rest_methods get;
      tnt_pass tnt;
    }

    ## Space id and Index id are getting from the query args.
    ## Defaults are off
    ## [[[
    location /insert_ext_fmt {
      tnt_insert off "space_id=%%space_id&index_id=%%idx_id&value=%n&string=%s&float=%f&double=%d&bool=%b&int=%n";
      tnt_pass tnt;
    }
    location /delete_ext_fmt {
      tnt_delete off off "space_id=%%space_id,index_id=%%idx_id,value=%n";
      tnt_pass tnt;
    }
    location /select_ext_fmt {
      tnt_select_limit_max 100;
      tnt_select off off 0 100 eq
        "space_id=%%space_id,index_id=%%idx_id,iter=%%it,limit=%%lim,offset=%%off,value=%n";
      tnt_pass tnt;
    }
    location /replace_ext_fmt {
      tnt_replace off "space_id=%%space_id,value=%n&string=%s&float=%f&double=%d&bool=%b&int=%n";
      tnt_pass tnt;
    }
    location /dml_allowed_sp {
      tnt_allowed_spaces 512,513;
      tnt_allowed_indexes 0,1,2;
      tnt_insert off "s=%%space_id,i=%%idx_id,v=%n";
      tnt_pass tnt;
    }
    location /update_fmt {
      tnt_update off "value=%kn" "space_id=%%space_id&string=%s&float=%f&double=%d&bool=%b&int=%n";
      tnt_pass tnt;
    }
    location /delete_mt_fmt {
      tnt_delete off off "space_id=%%space_id,index_id=%%idx_id,key=%n,key1=%s";
      tnt_pass tnt;
    }
    location /insert_mt_fmt {
      tnt_insert off
        "space_id=%%space_id,index_id=%%idx_id&key=%n&key1=%s&string=%s";
      tnt_pass tnt;
    }
    location /update_mt_fmt {
      tnt_update off "key=%kn,key1=%ks"
          "space_id=%%space_id,index_id=%%idx_id,string=%s";
      tnt_pass tnt;
    }
    location /upsert_fmt {
      tnt_upsert off "space_id=%%space_id,key=%n,key1=%s" "string=%os";
      tnt_pass tnt;
    }
    location /select_514 {
      tnt_select 514 1 0 100 all "key=%n,key1=%s";
      tnt_pass tnt;
    }
    ## ]]]


    # Issue - https://github.com/tarantool/nginx_upstream_module/issues/108 [[[
		location = /issue_108/ {
        add_header Cache-Control "private, no-cache, no-store";
        add_header Expires "Thu, 01 Jan 1970 00:00:01 GMT";

        tnt_http_rest_methods             get;
        tnt_pure_result                   on;
        tnt_multireturn_skip_count        2;
        tnt_pass_http_request             parse_args;
        tnt_method                        "issue_108";
        tnt_pass                          tnt;
        tnt_pass_http_request_buffer_size 32k;

        access_log off;
    }
		# ]]]

    location /delete_post {
      tnt_delete 515 0 "id=%n";
      tnt_pass tnt;
    }
    location /select_post {
      tnt_select 515 0 0 100 ge "id=%n";
      tnt_pass tnt;
    }
    location /insert_post {
      tnt_replace 515 "id=%n";
      tnt_pass tnt;
    }
    location /replace_post {
      tnt_replace 515 "id=%n";
      tnt_pass tnt;
    }
    location /update_post {
      tnt_update 515 "id=%kn" "value=%s,value1=%f";
      tnt_pass tnt;
    }

    # https://github.com/tarantool/nginx_upstream_module/issues/111
    # https://github.com/tarantool/nginx_upstream_module/issues/110
    location /issue_110_and_111 {

      tnt_http_rest_methods get post put delete patch;

      if ($request_method = GET) {
        tnt_select 516 0 0 100 all "key=%s";
      }
      if ($request_method = POST) {
        tnt_insert 516 "key=%s,value=%n";
      }
      if ($request_method = PUT) {
        tnt_update 516 "key=%ks" "value=%n";
      }
      if ($request_method = DELETE) {
        tnt_delete 516 0 "key=%s";
      }
      if ($request_method = PATCH) {
        tnt_upsert 516 "key=%s,new_value=%n" "updated_value=%on";
        tnt_pass tnt;
      }
      tnt_pass tnt;
    }
    location /issue_120 {
      tnt_pass_http_request on parse_args unescape;
      tnt_http_rest_methods all;
      tnt_http_methods all;
      tnt_pass tnt;
    }
   }
}
